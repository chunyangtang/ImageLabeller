name: Build Executable

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.10']
        include:
          # Windows x64 build
          - os: windows-latest
            target_arch: x64 # Define the target architecture for this combination
            asset_os_name: windows # Name for release asset

          # macOS x64 build (runs on macos-latest which is ARM64, uses Rosetta for x64 build)
          - os: macos-latest
            target_arch: x64
            asset_os_name: macos

          # macOS arm64 build (native on macos-latest)
          - os: macos-latest
            target_arch: arm64
            asset_os_name: macos-arm64 # Differentiate for release asset name

          # Ubuntu x64 build
          - os: ubuntu-latest
            target_arch: x64
            asset_os_name: linux

          # Ubuntu arm64 build (requires a dedicated arm64 runner)
          - os: ubuntu-latest-arm64 # This is the specific ARM64 runner for Ubuntu
            target_arch: arm64
            asset_os_name: linux-arm64 # Differentiate for release asset name

    steps:
      - name: Debug Matrix Variables
        run: |
          echo "OS: ${{ matrix.os }}"
          echo "Python Version: ${{ matrix.python-version }}"
          echo "Target Architecture: ${{ matrix.target_arch }}" # Use target_arch now

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }} (${{ matrix.target_arch }})
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target_arch }} # Use target_arch here

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build executable
        run: |
          # PyInstaller might need specific flags for arm64 if you encounter issues,
          # but generally it handles the target architecture based on the Python environment.
          pyinstaller --onefile --windowed --name ImageLabeller main.py config.py data_manager.py --noconfirm

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          # Naming artifacts more descriptively with OS and architecture
          name: executable-${{ matrix.asset_os_name }}-${{ matrix.target_arch }}
          path: dist/

      - name: Zip macOS .app (if applicable)
        # This will run for both macos-latest x64 and macos-latest arm64 builds
        if: startsWith(matrix.os, 'macos') # Use startsWith to catch both macos-latest (for x64 and arm64)
        run: |
          cd dist
          # PyInstaller generates .app for macOS. Zip it.
          # The resulting .app might be universal or specific depending on the PyInstaller build environment.
          zip -r ImageLabeller.app.zip ImageLabeller.app
          cd ..

      - name: Create Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: |
            # Conditionally select the path based on the target_os_name
            ${{ contains(matrix.asset_os_name, 'windows') && './dist/ImageLabeller.exe' || '' }}
            ${{ contains(matrix.asset_os_name, 'macos') && './dist/ImageLabeller.app.zip' || '' }}
            ${{ contains(matrix.asset_os_name, 'linux') && './dist/ImageLabeller' || '' }}
          asset_name: |
            # Construct asset names using matrix.asset_os_name and matrix.target_arch
            ImageLabeller-${{ matrix.asset_os_name }}-${{ matrix.target_arch }}
            ${{ contains(matrix.asset_os_name, 'windows') && '.exe' || '' }}
            ${{ contains(matrix.asset_os_name, 'macos') && '.app.zip' || '' }}
          asset_content_type: |
            ${{ contains(matrix.asset_os_name, 'windows') && 'application/vnd.microsoft.portable-executable' || '' }}
            ${{ contains(matrix.asset_os_name, 'macos') && 'application/zip' || '' }}
            ${{ contains(matrix.asset_os_name, 'linux') && 'application/octet-stream' || '' }}
